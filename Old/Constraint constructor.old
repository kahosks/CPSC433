New constraint constructor as it stands now:
currently does Unwanted, notCompat, CourseMax, and CourseMin,
It will be very simular to add the evening constraints and the class specific ones tomorrow

	private void makeConstraints(){
		ArrayList<Constraint> hcArrayList = new ArrayList<Constraint>();
		//For each of the non-compatible course pairs
		for(int i = 0; i<notCompatible.size();i++){
			String firstName=notCompatible.get(i).a.toString().trim();
			String secondName=notCompatible.get(i).b.toString().trim();
			int indexA = 0;
			int indexB = 0;

			for (int j = 2;j< indexArray.length;j++){
				String indexString = indexArray[j];
				if(indexString.equalsIgnoreCase(firstName)){
					indexA=j;
				}
				else if(indexString.equalsIgnoreCase(secondName)){
					indexB=j;
				}
			}
			if(indexA>0 && indexB>0){
				hcArrayList.add(new CourseCourseConstraint(indexA, indexB));
			}
			else{
				System.out.println("Error making notCompatibleConstraint");
			}
		}
		/*System.out.println(Arrays.toString(indexArray));
		System.out.println(Arrays.toString(initialProblem));
		for (int i = 0; i<hcArrayList.size();i++){
			System.out.println(hcArrayList.get(i));
			System.out.println(i);
		}*/
		//Now do all of the unwanted constraints
		for(int i = 0; i<unwanted.size();i++){
			ParserClass unwantedEx = unwanted.get(i);
			int dayOffset;
			if(unwantedEx.day.equalsIgnoreCase("MO")){
				dayOffset = 0;
			}
			else if(unwantedEx.day.equalsIgnoreCase("TU")){
				dayOffset = 2400;
			}
			else{
				dayOffset = 4800;
			}
			dayOffset +=unwantedEx.getTimeInt();
			for(int j=2; j< indexArray.length; j++){
				if(indexArray[j].equalsIgnoreCase(unwantedEx.getIdentifier().trim())){
					hcArrayList.add(new CourseTimeConstraint(j,dayOffset));
				}
			}
			
		}
		//Now do the Course max and lab max constraints
		//Need all of the lecture/lab indexes 
		ArrayList<Integer> courseIndexes = new ArrayList<Integer>();
		ArrayList<Integer> labIndexes = new ArrayList<Integer>();
		
		for(int i = 0; i < indexArray.length; i++){
			if(indexArray[i].contains("LEC")){
				courseIndexes.add(i);
			}
			else{
				labIndexes.add(i);
			}
		}
		int[] courseIndexesArray = new int[courseIndexes.size()];
		for(int i = 0; i<courseIndexes.size();i++){
			courseIndexesArray[i]=courseIndexes.get(i);
		}
		int[] labIndexesArray = new int[labIndexes.size()];
		for(int i = 0; i<labIndexes.size();i++){
			labIndexesArray[i]=labIndexes.get(i);
		}
		CourseMaxConstraint.setCourseIndexes(courseIndexesArray);
		LabMaxConstraint.setLabIndexes(labIndexesArray);
		
		for(int i = 0; i<M.size(); i++){
			hcArrayList.add(new CourseMaxConstraint(M.get(i)));
		}
		for(int i = 0; i<TCourses.size(); i++){
			hcArrayList.add(new CourseMaxConstraint(TCourses.get(i)));
		}
		for(int i = 0; i<MLabs.size(); i++){
			hcArrayList.add(new LabMaxConstraint(MLabs.get(i)));
		}
		for(int i = 0; i<TLabs.size(); i++){
			hcArrayList.add(new LabMaxConstraint(TLabs.get(i)));
		}
		for(int i = 0; i<F.size(); i++){
			hcArrayList.add(new LabMaxConstraint(F.get(i)));
		}
		hardConstraints = hcArrayList.toArray(new Constraint[hcArrayList.size()]);
		System.out.println(Arrays.toString(hardConstraints));
	}
